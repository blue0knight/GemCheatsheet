== README

This would document whatever steps are necessary in creating a new Ruby app,
with Postgres and Rspec, and get it ready for development.

Step 1: Navigate to where you want to create your app.
  $ cd ~/Sites

Step 2: Create new repo/app without unit tests
  $ rails new {name} -T
  example: $ rails new {app} -T
  or if needing to a specific version of rails: $ rails _4.1.0_ new {app} -T

Step 3: Navigate into new app
  $ cd {app}

Step 4: Set up git
  $ git init

Step 5: Set up Github and make first commit
  copy/paste from Github to create remote repo
  $ git add .
  $ git commit -m "Initial commit"

Step 6: Open app in favorite text editor.
  $ atom .

Step 7: Set up preferred test and development gems:

  source 'https://rubygems.org'


  gem 'rails', '~> 5.0.2'
  gem 'puma', '~> 3.0'
  gem 'sass-rails', '~> 5.0'
  gem 'uglifier', '>= 1.3.0'
  gem 'coffee-rails', '~> 4.2'

  gem 'jquery-rails'
  gem 'turbolinks', '~> 5'
  gem 'jbuilder', '~> 2.5'

  group :development, :test do
    gem 'sqlite3'
    gem 'pry'
    gem 'pry-nav'
    gem 'pry-rails', '~> 0.3.2'
    gem 'rspec-rails'
    gem 'byebug'
  end


  group :development do
    gem 'web-console', '~> 2.0'
    gem 'better_errors'
    gem 'binding_of_caller'
    gem 'listen', '~> 3.0.5'
    gem 'letter_opener'
    gem 'spring'
    gem 'spring-watcher-listen', '~> 2.0.0'
  end

  group :test do
      gem 'capybara-email'
      gem 'capybara-webkit'
      # needed to keep database clean from transactional specs as capybara-webkit
      # runs your Rails app separately from Rspec
      gem 'database_cleaner'
      gem 'factory_girl_rails'
      gem 'faker' #some older RubySnacks reference 'ffaker'
      gem 'simple_bdd'
      gem 'shoulda-matchers'
   end

  group :production do
    gem 'pg'
    gem 'rails_12factor'
  end

Step 8: Install the Gems:
  $Bundle install
  
Step 9: Edit config/database.yml with preferred database and database names
    adapter: postgresql

  default: &default
    adapter: sqlite3
    pool: 5
    timeout: 5000

  development:
    <<: *default
    database: db/development.sqlite3

  test:
    <<: *default
    database: db/test.sqlite3

  production:
    adapter: postgresql
    pool: 5
    timeout: 5000

Step 10: Create Database
  $ rails db:create  #rake db:create still works too!!!

Step 11: Install rspec
  $ rails generate rspec:install

Step 12: Edit or replace rails_helper.rb with the ff:
  # This file is copied to spec/ when you run 'rails generate rspec:install'
  ENV['RAILS_ENV'] ||= 'test'
  require File.expand_path('../../config/environment', __FILE__)
  # Prevent database truncation if the environment is production
  abort("The Rails environment is running in production mode!") if Rails.env.production?
  require 'rspec/rails'
  require 'capybara/rspec'
  require 'simple_bdd'
  require 'shoulda/matchers'

  # Add additional requires below this line. Rails is not loaded until this point!

  # Requires supporting ruby files with custom matchers and macros, etc, in
  # spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are
  # run as spec files by default. This means that files in spec/support that end
  # in _spec.rb will both be required and run as specs, causing the specs to be
  # run twice. It is recommended that you do not name files matching this glob to
  # end with _spec.rb. You can configure this pattern with the --pattern
  # option on the command line or in ~/.rspec, .rspec or `.rspec-local`.
  #
  # The following line is provided for convenience purposes. It has the downside
  # of increasing the boot-up time by auto-requiring all files in the support
  # directory. Alternatively, in the individual `*_spec.rb` files, manually
  # require only the support files necessary.
  #
  # Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }

  # Checks for pending migration and applies them before tests are run.
  # If you are not using ActiveRecord, you can remove this line.
  ActiveRecord::Migration.maintain_test_schema!

  RSpec.configure do |config|
   # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
   config.fixture_path = "#{::Rails.root}/spec/fixtures"

   # If you're not using ActiveRecord, or you'd prefer not to run each of your
   # examples within a transaction, remove the following line or assign false
   # instead of true.
   config.use_transactional_fixtures = true

   config.include SimpleBdd, type: :feature
   # config.include Devise::TestHelpers, :type => :controller
   config.before(:suite) do
     DatabaseCleaner.strategy = :truncation
     DatabaseCleaner.clean_with(:truncation)
   end

   config.before(:each) do
     DatabaseCleaner.start
   end

   config.after(:each) do
     DatabaseCleaner.clean
   end
    # RSpec Rails can automatically mix in different behaviours to your tests
    # based on their file location, for example enabling you to call `get` and
    # `post` in specs under `spec/controllers`.
    #
    # You can disable this behaviour by removing the line below, and instead
    # explicitly tag your specs with their type, e.g.:
    #
    #     RSpec.describe UsersController, :type => :controller do
    #       # ...
    #     end
    #
    # The different available types are documented in the features, such as in
    # https://relishapp.com/rspec/rspec-rails/docs
    config.infer_spec_type_from_file_location!

    # Filter lines from Rails gems in backtraces.
    config.filter_rails_from_backtrace!
    # arbitrary gems may also be filtered via:
    # config.filter_gems_from_backtrace("gem name")
  end
  
Step 13: Commit set up 
  $ git add .
  $ git commit -m "Set up app with development gems, rspec, and pg"
